class GPoll:
    """Class representing the GPoll Events"""

    STATUS_MAP = {
        "00": "No activity",
        "01": "No Response",
        "11": "Slot door was opened",
        "12": "Slot door was closed",
        "13": "Drop door was opened",
        "14": "Drop door was closed",
        "15": "Card cage was opened",
        "16": "Card cage was closed",
        "17": "AC power was applied to gaming machine",
        "18": "AC power was lost from gaming machine",
        "19": "Cashbox door was opened",
        "1a": "Cashbox door was closed",
        "1b": "Cashbox was removed",
        "1c": "Cashbox was installed",
        "1d": "Belly door was opened",
        "1e": "Belly door was closed",
        "1f": "No activity and waiting for player input (obsolete)",
        "20": "General tilt (Use this tilt when other exception tilt codes do not apply or when the tilt condition cannot be determined.)",
        "21": "Coin in tilt",
        "22": "Coin out tilt",
        "23": "Hopper empty detected",
        "24": "Extra coin paid",
        "25": "Diverter malfunction (controls coins to drop or hopper)",
        "27": "Cashbox full detected",
        "28": "Bill jam",
        "29": "Bill acceptor hardware failure",
        "2a": "Reverse bill detected",
        "2b": "Bill rejected",
        "2c": "Counterfeit bill detected",
        "2d": "Reverse coin in detected",
        "2e": "Cashbox near full detected",
        "31": "CMOS RAM error (data recovered from EEPROM)",
        "32": "CMOS RAM error (no data recovered from EEPROM)",
        "33": "CMOS RAM error (bad device)",
        "34": "EEPROM error (data error)",
        "35": "EEPROM error (bad device)",
        "36": "EPROM error (different checksum – version changed)",
        "37": "EPROM error (bad checksum compare)",
        "38": "Partitioned EPROM error (checksum – version changed)",
        "39": "Partitioned EPROM error (bad checksum compare)",
        "3a": "Memory error reset (operator used self test switch)",
        "3b": "Low backup battery detected",
        "3c": "Operator changed options (This is sent whenever the operator changes configuration options. This includes, but is not limited to, denomination, gaming machine address, or any option that affects the response to long polls 1F, 53, 54, 56, A0, B2, B3, B4, or B5.)",
        "3d": "A cash out ticket has been printed",
        "3e": "A handpay has been validated",
        "3f": "Validation ID not configured",
        "40": "Reel Tilt (Which reel is not specified.)",
        "41": "Reel 1 tilt",
        "42": "Reel 2 tilt",
        "43": "Reel 3 tilt",
        "44": "Reel 4 tilt",
        "45": "Reel 5 tilt",
        "46": "Reel mechanism disconnected",
        "47": "$1.00 bill accepted (non-RTE only)",
        "48": "$5.00 bill accepted (non-RTE only)",
        "49": "$10.00 bill accepted (non-RTE only)",
        "4a": "$20.00 bill accepted (non-RTE only)",
        "4b": "$50.00 bill accepted (non-RTE only)",
        "4c": "$100.00 bill accepted (non-RTE only)",
        "4d": "$2.00 bill accepted (non-RTE only)",
        "4e": "$500.00 bill accepted (non-RTE only)",
        "4f": "Bill accepted",
        "50": "$200.00 bill accepted",
        "51": "Handpay is pending (Progressive, non-progressive or cancelled credits)",
        "52": "Handpay was reset (Jackpot reset switch activated)",
        "53": "No progressive information has been received for 5 seconds",
        "54": "Progressive win (cashout device/credit paid)",
        "55": "Player has cancelled the handpay request",
        "56": "SAS progressive level hit",
        "57": "System validation request",
        "60": "Printer communication error",
        "61": "Printer paper out error",
        "66": "Cash out button pressed",
        "67": "Ticket has been inserted",
        "68": "Ticket transfer complete",
        "69": "AFT transfer complete",
        "6a": "AFT request for host cashout",
        "6b": "AFT request for host to cash out win",
        "6c": "AFT request to register",
        "6d": "AFT registration acknowledged",
        "6e": "AFT registration cancelled",
        "6f": "Game locked",
        "70": "Exception buffer overflow",
        "71": "Change lamp on",
        "72": "Change lamp off",
        "74": "Printer paper low",
        "75": "Printer power off",
        "76": "Printer power on",
        "77": "Replace printer ribbon",
        "78": "Printer carriage jammed",
        "79": "Coin in lockout malfunction (coin accepted while coin mech disabled)",
        "7a": "Gaming machine soft (lifetime-to-date) meters reset to zero",
        "7b": "Bill validator (period) totals have been reset by an attendant/operator",
        "7c": "A legacy bonus pay awarded and/or a multiplied jackpot occurred",
        "7e": "Game has started",
        "7f": "Game has ended",
        "80": "Hopper full detected",
        "81": "Hopper level low detected",
        "82": "Display meters or attendant menu has been entered",
        "83": "Display meters or attendant menu has been exited",
        "84": "Self test or operator menu has been entered",
        "85": "Self test or operator menu has been exited",
        "86": "Gaming machine is out of service (by attendant)",
        "87": "Player has requested draw cards (only send when in RTE mode)",
        "88": "Reel N has stopped (only send when in RTE mode)",
        "89": "Coin/credit wagered (only send when in RTE mode, and only send if the configured max bet is 10 or less)",
        "8a": "Game recall entry has been displayed",
        "8b": "Card held/not held (only send when in RTE mode)",
        "8c": "Game selected",
        "8e": "Component list changed",
        "8f": "Authentication complete",
        "98": "Power off card cage access",
        "99": "Power off slot door access",
        "9a": "Power off cashbox door access",
        "9b": "Power off drop door access",
    }

    @classmethod
    def get_status(cls, key):
        """Get the status value for the given key.

        Args:
            key (str): The key for the status.

        Returns:
            str: The corresponding status value or an error message if the key is not found.
        """
        # Use get() method to retrieve the value, or return an error message.
        return cls.STATUS_MAP.get(key, f"Unknown key: {key}")
